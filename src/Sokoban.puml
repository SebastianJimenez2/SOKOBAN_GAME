@startuml
'https://plantuml.com/class-diagram
'TODO: SEPARAR MACRO A MICRO
package sokoban <<Folder>> {
    package juego <<Folder>> {
        class Sokoban{
            - numeroDeNivelSeleccionado: int
            - númeroDeNiveles: int
            - ultimaPartida: File

            + iniciarNiveles(): Nivel[]
            + iniciarNivel(evento: KeyEvent): void
            + reiniciarNivel(): void
            + enviarNivelParaElPintado(): Nivel
            + contarNivelesEncontrados(): int
            + cargarÚltimaPartidaJugada(): void
            + guardarPartida(): void
            + setNúmeroDeNivelSeleccionado(numeroDeNivel: int): void
        }

        package funcionalidadDelJuego <<Folder>> {
            class PuntuaciónMenorACeroException

            class Nivel {
                - bob: Bob
                - numeroDeNivel: int
                - mapa: Mapa
                - elNivelEstáCompleto: boolean
                - rutaDelNivel: File

                + obtenerRutaDelNivel(): File
                + isElNivelEstáCompleto(): boolean
                + teclaPresionada(evento: KeyEvent): void
                + reiniciarNivel()
                + getBob(): Bob
                + getMapa(): Mapa
            }

            package mapear <<Folder>> {
                class Mapa{
                    - rutaDelNivel: File
                    - diseñoInicial: int[][]
                    - diseñoEnBloques: Bloque[][]

                    + transformarMapaNuméricoABloques(): void
                    + tomarMapaNuméricoDelTexto(): void
                    + contarBotones(): int
                    + getDiseñoEnBloques(): Bloque[][]
                }
                enum CódigoDeBloque {
                    + {static} SUELO: CódigoDeBloque
                    + {static} PARED: CódigoDeBloque
                    + {static} CAJA: CódigoDeBloque
                    + {static} BOTÓN: CódigoDeBloque
                    + {static} VACÍO: CódigoDeBloque
                }
            }

            package movimientoPersonaje <<Folder>> {
                class IOException
                class Bob{
                    - posiciónEnX: int
                    - posiciónEnY: int
                    - direcciónDeSkin: URL
                    - rutaDelNivel: File
                    - numeroDePasos: int
                    - numeroDeEmpujones: int
                    - mapa: Mapa

                    + elBloqueEsUnaCaja(constanteRespectoABob: ConstanteRespectoABob): boolean
                    + elBloqueEsUnBotón(constanteRespectoABob: ConstanteRespectoABob): boolean
                    + elBloqueEsUnSuelo(constanteRespectoABob: ConstanteRespectoABob): boolean
                    + esTraspasableElBloque(constanteRespectoABob: ConstanteRespectoABob): boolean
                    + devolverElBloqueRespectoABob(constanteRespectoABob: ConstanteRespectoABob): Bloque
                    + puedeEmpujarCajaParticular(constanteRespectoABob1: ConstanteRespectoABob, constanteRespectoABob2: ConstanteRespectoABob): boolean
                    + puedeEmpujarCajaGeneral(evento: KeyEvent): boolean
                    + estáPresionandoUnBotónLaCajaQueDeseaMover(constanteRespectoABob: ConstanteRespectoABob): boolean
                    + mutarBloque(constanteRespectoABob: ConstanteRespectoABob, bloque: Bloque): void
                    + cambiarEstadoDeLaCaja(constanteRespectoABob: ConstanteRespectoABob, presionaBotón: boolean): void
                    + esUnEmpujarDeTipoUno(constanteRespectoABob1: ConstanteRespectoABob, constanteRespectoABob2: ConstanteRespectoABob): boolean
                    + empujarEnCasoDeTipoUno(constanteRespectoABob1: ConstanteRespectoABob, constanteRespectoABob2: ConstanteRespectoABob): void
                    + esUnEmpujarDeTipoDos(constanteRespectoABob1: ConstanteRespectoABob, constanteRespectoABob2: ConstanteRespectoABob): boolean
                    + empujarEnCasoDeTipoDos(constanteRespectoABob1: ConstanteRespectoABob, constanteRespectoABob2: ConstanteRespectoABob): void
                    + esUnEmpujarDeTipoTres(constanteRespectoABob1: ConstanteRespectoABob, constanteRespectoABob2: ConstanteRespectoABob): boolean
                    + empujarEnCasoDeTipoTres(constanteRespectoABob1: ConstanteRespectoABob, constanteRespectoABob2: ConstanteRespectoABob): void
                    + empujarDeterminado(constanteRespectoABob1: ConstanteRespectoABob, constanteRespectoABob2: ConstanteRespectoABob): void
                    + empujarCajaParticular(constanteRespectoABob1: ConstanteRespectoABob, constanteRespectoABob2: ConstanteRespectoABob): void
                    + empujarCajaGeneral(evento: KeyEvent): void
                    + puedeAvanzar(evento: KeyEvent): boolean
                    + caminarParticular(constanteRespectoABob: ConstanteRespectoABob): void
                    + actualizarDirecciónDeSkin(direcciónDeSkinSegúnElMovimiento: DirecciónDeSkinSegúnElMovimiento): void
                    + caminarGeneral(evento: KeyEvent): void
                    + interactuarConElMapa(evento: KeyEvent): void
                    + tomarPosiciónEnXDelArchivo(): int
                    + tomarPosiciónEnYDelArchivo(): int
                    + reiniciarBob(): void
                    + posiciónEnX(): int
                    + posiciónEnY(): int
                    + getDirecciónSkin(): URL
                    + getNúmeroDePasos(): int
                    + getNúmeroDeEmpujones(): int
                }

                enum ConstanteRespectoABob {
                    + {static}  UN_BLOQUE_ARRIBA: ConstanteRespectoABob
                    + {static}  UN_BLOQUE_ABAJO: ConstanteRespectoABob
                    + {static}  UN_BLOQUE_IZQUIERDA: ConstanteRespectoABob
                    + {static}  UN_BLOQUE_DERECHA: ConstanteRespectoABob
                    + {static}  DOS_BLOQUES_ARRIBA: ConstanteRespectoABob
                    + {static}  DOS_BLOQUES_ABAJO: ConstanteRespectoABob
                    + {static}  DOS_BLOQUES_IZQUIERDA: ConstanteRespectoABob
                    + {static}  DOS_BLOQUES_DERECHA: ConstanteRespectoABob
                    - direcciónX: int
                    - direcciónY: int

                    + getDirecciónEnX(): int
                    + getDirecciónEnY(): int
                }

                enum DirecciónDeSkinSegúnElMovimiento {
                    + {static} CAMINANDO_ARRIBA: DirecciónDeSkinSegúnElMovimiento
                    + {static} CAMINANDO_ABAJO: DirecciónDeSkinSegúnElMovimiento
                    + {static} CAMINANDO_IZQUIERDA: DirecciónDeSkinSegúnElMovimiento
                    + {static} CAMINANDO_DERECHA: DirecciónDeSkinSegúnElMovimiento
                    - dirección: String

                    + getDirección(): String
                }
            }
        }
    }

    package soundtrack <<Folder>> {
       class SoundTrack {
            - nombreCanción: String
            - canción: Clip
            - file: File
            - audioStream: AudioStreamInputStream

            + reproducir(canción: Clip): void
            + reiniciarCanción(canción: Clip): void
            + pararCanción(canción: Clip): void
            + getCanción(): Clip
       }
    }

    package background <<Folder>> {
        class Fondo {
            - rutaDeLaImagen: String

            + paintComponent(g: Graphics): void
        }
    }

    package interfazGráfica <<Folder>> {
        class Créditos <extends JFrame>{
            - btnVolverC: JButton
            - pnlCréditos: JPanel
            - btnJhordy: JButton
            - btnKarina: JButton
            - btnKevin: JButton
            - btnSebas: JButton
            - btnJorge: JButton
            - pnlIntegrantes: JPanel

            + crearFrame()
        }

        class MenúNiveles <extends JFrame> {
            - btnNivel1: JButton
            - btnNivel2: JButton
            - btnNivel3: JButton
            - btnNivel4: JButton
            - btnVolver: JButton
            - btnCargar: JButton
            - pnlMenuNiveles: JPanel
            - ventanaSokoban: VentanaSokoban

            + crearFrame(): void
        }

        class Instrucciones <extends JFrame> {
            - pnlInstrucciones: JPanel
            - btnVolver: JButton

            + crearFrame()
        }

        class MenúPrincipal <extends JFrame> {
            - pnlMenúPrincipal: JPanel
            - btnJugar: JButton
            - btnCréditos: JButton
            - btnSalir: JButton
            - btnInstrucciones: JButton
            - pnlTítulo: JPanel
            - pnlBotones: JPanel
            - pnlLogo: JPanel
            - pnlBajo: JPanel
            - {static} sokoban: Sokoban

            + crearFrame(): void
        }

        class VentanaSokoban <extends JFrame> {
            - canción: SoundTrack
            - canciónActual: String
            - cuadroGráficoDeJuego: CuadroGráficoDeJuego
            - btnVolver:JButton
            - btnReiniciar: JButton
            - btnGuardar: JButton
            - content: JPanel
            - pnlSokoban: JPanel

            + iniciar(nombreCanción: String): void
            + escogerCuadroGraficoDeJuego(): CuadroGráficoDeJuego
        }

        package interfazGráficaDelJuego {

            class CuadroGráficoDeJuego <extends JPanel>  {
                - nivel: Nivel
                - direcciónDelFondo: URL
                - encuadreEnY: int
                - encuadreEnX: int
                - pnlCuadroGraficoDeJuego: JPanel

                + paint(g: Graphics): void
                + pintarFondoGanador(g: Graphics2D): void
                + pintarNivel(g: Graphics2D): void
                + pintarFondo(g: Graphics2D): void
                + pintarMapa(g: Graphics2D): void
                + pintarBob(g: Graphics2D): void
                + pintarBloque(g: Graphics2D, fila: int, columna: int): void
                + pintarPuntaje(g: Graphics2D): void
                + pintarPalabras(g: Graphics2D): void
                + crearFuente(nombreDeLaFuente: String, tamaño: int)
            }
        }
    }

    package bloques <<Folder>> {
        abstract class Bloque{
            # direcciónDeSkin: URL
            + esTraspasable: Boolean
            # esMovible: Boolean

            + getDirecciónDeSkin(): URL
        }

        class Caja{
            + laCajaEstáPresionandoUnBotón: boolean

            + setLaCajaEstáPresionandoUnBotón(laCajaEstáPresionandoUnBotón: boolean): void
        }

        class Pared

        class Suelo

        class Vacío

        class Botón
    }
}

interfazGráfica -right-> background
Bob .left.> mapear
Bob --> DirecciónDeSkinSegúnElMovimiento
Bob --> ConstanteRespectoABob
Sokoban -left-> "4" funcionalidadDelJuego: niveles
Nivel -left-> soundtrack
Mapa --> "*"bloques
Mapa -left-> CódigoDeBloque
Nivel --> mapear
Nivel -right-> movimientoPersonaje
Pared -up-|> Bloque
Suelo -up-|> Bloque
Vacío -left-|> Bloque
Caja -right-|> Bloque
Botón -up-|> Bloque
MenúPrincipal --> MenúNiveles
MenúPrincipal -right-> Instrucciones
MenúPrincipal -left-> Créditos
MenúNiveles --> VentanaSokoban
interfazGráfica --> juego
VentanaSokoban -right-> interfazGráficaDelJuego

PuntuaciónMenorACeroException "<<throws>>"<.down. Nivel
IOException "<<throws>>"<.. Bob

@enduml